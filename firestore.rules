rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function uid() { return request.auth.uid; }

    match /users/{userId} {
      allow read: if isSignedIn() && (userId == uid());
      allow write: if isSignedIn() && (userId == uid());
    }

    match /groups/{groupId} {
      allow read: if isSignedIn() && (resource.data.memberIds.hasAny([uid()]) || resource.data.isPublic == true);
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (request.resource.data.memberIds.hasAll(resource.data.memberIds)) && (resource.data.ownerId == uid());
    }

    match /bets/{betId} {
      allow read: if isSignedIn() && (
        resource.data.participantIds.hasAny([uid()]) ||
        (resource.data.groupId != null &&
         get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds.hasAny([uid()]))
      );

      allow create: if isSignedIn() && request.resource.data.creatorId == uid();

      allow update: if isSignedIn() && (
        // creator can cancel/edit while pending
        (resource.data.creatorId == uid()) ||
        // participants can confirm/decline/propose double/resolve
        (resource.data.participantIds.hasAny([uid()]))
      );

      allow delete: if false; // no deletes in MVP
    }

    match /notifications/{notifId} {
      allow read, update: if isSignedIn() && resource.data.userId == uid();
      allow create: if isSignedIn();
      allow delete: if false;
    }
  }
}
